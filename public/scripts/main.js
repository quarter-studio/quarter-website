'use strict';(function(){function h(b){twgl.resizeCanvasToDisplaySize(a.canvas,1);a.viewport(0,0,a.canvas.width,a.canvas.height);b={u_time:.001*b,u_resolution:[a.canvas.width,a.canvas.height],u_mouse:[f.x,f.y],u_texture:d.noise,u_ashima1:d.ashima1,u_ashima2:d.ashima2};a.useProgram(g.program);twgl.setBuffersAndAttributes(a,g,k);twgl.setUniforms(g,b);twgl.drawBufferInfo(a,k);requestAnimationFrame(h)}let f={x:0,y:0},a=document.querySelector(".shader").getContext("webgl"),g=twgl.createProgramInfo(a,["attribute vec4 position;\nvoid main() {\n  gl_Position = position;\n}",
"\n#ifdef GL_ES\nprecision mediump float;\n#endif\nuniform vec2 u_resolution;\nuniform vec2 u_mouse;\nuniform float u_time;\nuniform sampler2D u_texture;\nuniform sampler2D u_ashima1;\nuniform sampler2D u_ashima2;\nfloat random(vec2 st) {\n  float a = 12.9898;\n  float b = 78.233;\n  float c = 43758.5453;\n  float dt= dot(st.xy ,vec2(a,b));\n  float sn= mod(dt,3.14);\n  return fract(sin(sn) * c);\n}\nfloat whiteNoise(in vec2 p){\n  vec2 tv = p * vec2(u_resolution.x/256., u_resolution.y/256.);  return (texture2D(u_texture, tv).r);\n}\nfloat snoise(in vec2 p){\n  vec2 tv = p * vec2(u_resolution.x/2048., u_resolution.y/2048.);  vec4 tex = texture2D(u_ashima1, tv);\n  return tex.r;\n}\nfloat snoise2(in vec2 p){\n  vec2 tv = p * vec2(u_resolution.x/2048., u_resolution.y/2048.);  vec4 tex = texture2D(u_ashima2, tv);\n  return tex.r;\n}\nconst float STEPS = 4.;\nconst float LINE_WIDTH = 0.002;\nconst float CUTOFF = 0.5;\nfloat posX = u_mouse.x * 0.1;\nfloat posY = u_mouse.y * 0.1;\nvec2 mouseUV = u_mouse / u_resolution;\nvec3 hsv2rgb(vec3 c){\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\nmat2 rotate2d(float a){\n  return mat2(\n      cos(a), -sin(a),\n      sin(a), cos(a)\n  );\n}\nfloat getNoise(vec2 uv, float t){\n  const float SCALEX = 1.;\n  const float SCALEY = 1.;\n  float noise = snoise( rotate2d(sin(t*0.1) + posY * 2.) * vec2(uv.x * SCALEX + posX + t, uv.y * SCALEY + posY + t));\n  return noise;\n}\nfloat getDepth(float n){\n  float d = (n - CUTOFF) / (1. - CUTOFF);\n  d = floor(d*STEPS)/STEPS;\n  return d;\n}\nvoid main(){\n  float t = u_time * 0.01;\n  vec2 uv = gl_FragCoord.xy / u_resolution;\n  vec3 col = vec3(0);\n  float noise = getNoise(uv, t);\n  float d = getDepth(noise);\n  float h = 0.5;  float s = 0.;\n  float v = 0.;\n  float WIDEN = 1. + (sin(t)+1.)/2. * 1.5;\n  const int STEPS = 16;\n  for (int j=0; j<STEPS; j++){\n    vec2 dOffset = vec2(\n      getDepth(getNoise(uv + vec2(0, LINE_WIDTH) * WIDEN * pow(float(j), 1.25), t)),\n      getDepth(getNoise(uv + vec2(0, -LINE_WIDTH) * WIDEN * pow(float(j), 1.25), t))\n    );\n    if (d != dOffset.x || d != dOffset.y){\n      h = 0.;      s = 0.;\n      v += .0625 * floor( whiteNoise(uv*2.) + 0.2 * float(STEPS)/float(j+1));      if (d != dOffset.x){\n        v *= 0.75;\n      }\n    }\n  }\n  col = hsv2rgb(vec3(h,s,v));\n  col *= 0.2 + (gl_FragCoord.y/u_resolution.y) * 0.8;\n  gl_FragColor = vec4(col, 1.0);\n}"]),
k=twgl.createBufferInfoFromArrays(a,{position:[-1,-1,0,1,-1,0,-1,1,0,-1,1,0,1,-1,0,1,1,0]}),d=twgl.createTextures(a,{noise:{src:"/images/noise.png",mag:a.NEAREST},ashima1:{src:"/images/ashima1.png"},ashima2:{src:"/images/ashima2.png"}});requestAnimationFrame(h);window.addEventListener("mousemove",b=>{var c=a.canvas;var e=(c=c||b.target)||b.target;var d=e.getBoundingClientRect();e=b.clientX-d.left;b=b.clientY-d.top;e=e*c.width/c.clientWidth;b=b*c.height/c.clientHeight;c=b/a.canvas.height*-2+1;f.x=
e/a.canvas.width*2-1;f.y=c})})();
//# sourceMappingURL=main.js.map
